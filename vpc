

## Creating a directory to hold configs and output
mkdir ssmconfig && cd ssmconfig
 
## Creating a VPC with 10 CIDR
AWS_VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.{VpcId:VpcId}' --output text)
 
## Enabling DNS hostname for your VPC
aws ec2 modify-vpc-attribute --vpc-id $AWS_VPC_ID --enable-dns-hostnames "{\"Value\":true}"
 
## Create a public subnet
AWS_SUBNET_PUBLIC_ID=$(aws ec2 create-subnet --vpc-id $AWS_VPC_ID --cidr-block 10.0.1.0/24 --availability-zone us-west-2a --query 'Subnet.{SubnetId:SubnetId}' --output text)
 
## Enable Auto-assign Public IP on Public Subnet
aws ec2 modify-subnet-attribute --subnet-id $AWS_SUBNET_PUBLIC_ID --map-public-ip-on-launch
 
## Create an Internet Gateway
AWS_INTERNET_GATEWAY_ID=$(aws ec2 create-internet-gateway --query 'InternetGateway.{InternetGatewayId:InternetGatewayId}' --output text)
 
## Attach Internet gateway to your VPC
aws ec2 attach-internet-gateway --vpc-id $AWS_VPC_ID --internet-gateway-id $AWS_INTERNET_GATEWAY_ID
 
## Create a route table
AWS_CUSTOM_ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id $AWS_VPC_ID --query 'RouteTable.{RouteTableId:RouteTableId}' --output text )
 
## Create route to Internet Gateway
aws ec2 create-route --route-table-id $AWS_CUSTOM_ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $AWS_INTERNET_GATEWAY_ID
 
## Associate the public subnet with route table
AWS_ROUTE_TABLE_ASSOID=$(aws ec2 associate-route-table  --subnet-id $AWS_SUBNET_PUBLIC_ID --route-table-id $AWS_CUSTOM_ROUTE_TABLE_ID --output text)
 
## Create a security group
aws ec2 create-security-group --vpc-id $AWS_VPC_ID --group-name myvpc-security-group --description 'My VPC non default security group'
 
## Get security group ID's
AWS_DEFAULT_SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$AWS_VPC_ID" --query 'SecurityGroups[?GroupName == `default`].GroupId' \ 
--output text) && AWS_CUSTOM_SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$AWS_VPC_ID" --query 'SecurityGroups[?GroupName == `myvpc-security-group`].GroupId' \
--output text)
 
## Create security group ingress rules
aws ec2 authorize-security-group-ingress --group-id $AWS_CUSTOM_SECURITY_GROUP_ID --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "IpRanges": [{"CidrIp": "0.0.0.0/0", "Description": "Allow SSH"}]}]' &&
aws ec2 authorize-security-group-ingress --group-id $AWS_CUSTOM_SECURITY_GROUP_ID --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "IpRanges": [{"CidrIp": "0.0.0.0/0", "Description": "Allow HTTP"}]}]'
 
## Get Amazon Linux 2 latest AMI ID
AWS_AMI_ID=$(aws ec2 describe-images --owners 'amazon' --filters 'Name=name,Values=RHEL-7.7_HVM-????????-x86_64-0-Hourly2-GP2' 'Name=state,Values=available' \
--query 'sort_by(Images, &CreationDate)[-1].[ImageId]' --output 'text')
 
## Create a key-pair
aws ec2 create-key-pair --key-name patch-keypair --query 'KeyMaterial' --output text > patch-keypair.pem
 
## Create user data for a LAMP stack
cat <<EOF > myuserdata.txt
#!/bin/bash
sudo yum update -y
sudo systemctl enable amazon-ssm-agent
sudo systemctl start amazon-ssm-agent
sudo systemctl status amazon-ssm-agent
EOF
 
## Create an EC2 instance
AWS_EC2_INSTANCE_ID=$(aws ec2 run-instances --image-id $AWS_AMI_ID --instance-type t2.micro --key-name patch-keypair --monitoring "Enabled=false" \
--security-group-ids $AWS_CUSTOM_SECURITY_GROUP_ID --subnet-id $AWS_SUBNET_PUBLIC_ID --user-data file://myuserdata.txt --private-ip-address 10.0.1.10 \
--query 'Instances[0].InstanceId' --output text)
 
## Create an Instance profile for SSM
aws iam create-instance-profile --instance-profile-name "AmazonSSMInstanceProfile"
 
## Create a trust relation json file
cat <<EOF > trust_policy.json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
 
## Create an IAM role for SSM
aws iam create-role --role-name "AmazonSSMRoleForInstances" --assume-role-policy-document file://trust_policy.json
 
## Attach the required policy for SSM
aws iam attach-role-policy --role-name "AmazonSSMRoleForInstances" --policy-arn "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
 
## Add the role to the instance profile
aws iam add-role-to-instance-profile --instance-profile-name "AmazonSSMInstanceProfile" --role-name "AmazonSSMRoleForInstances"
 
## Attach the Instance Profile to the EC2 instance
aws ec2 associate-iam-instance-profile --instance-id "$AWS_EC2_INSTANCE_ID" --iam-instance-profile "Name=AmazonSSMInstanceProfile"
 
## Add a tag to the ec2 instance  
aws ec2 create-tags --resources $AWS_EC2_INSTANCE_ID --tags 'Key=Name,Value=MYAPP' 'Key="Patch Group",Value=AutoPatchGroup'
 
## Check if instance is added to SSM Managed Instance
aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$AWS_EC2_INSTANCE_ID"
